#include"gtest/gtest.h"

#include"cpu_backend/image/inner/filters/Gaussian1DFilter.h"

namespace cpu_backend
{
	namespace testing
	{



		TEST(Gaussian1DFilterTest, test1)
		{
			std::vector<double> input_image = {
				10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,  90., 110., 220.,
	   330.,  40.,  50., 160.,  70., 480.,  90., 110., 320., 430.,  40.,
		50., 260., 370.,  80., 490., 110., 420., 530.,  40.,  50.,  60.,
		70., 580.,  90.,  10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,
		90., 110., 220., 330.,  40.,  50., 160.,  70., 480.,  90., 110.,
	   320., 430.,  40.,  50., 260., 370.,  80., 490., 110., 420., 530.,
		40.,  50.,  60.,  70., 580.,  90

			};

			int width = 9;
			int height = 8;

			double std_deriv = 2;

			std::vector<double> expected_result =
			{
				130.50611834, 130.05221676, 126.71490139, 121.71686582,
	   121.42612279, 130.7810032 , 147.57009162, 164.38735185,
	   174.41786586, 142.78907895, 141.85991968, 137.26388176,
	   130.40189732, 128.54301944, 137.45651114, 154.92814017,
	   172.84623388, 183.6318092 , 158.15380359, 156.60721134,
	   150.36633   , 141.04099987, 137.05562656, 145.27363048,
	   163.50722713, 182.75007472, 194.45225601, 169.10987063,
	   167.09413079, 159.60227522, 148.38285073, 142.71399602,
	   150.29282251, 168.97496287, 189.09977263, 201.41636075,
	   177.45421677, 175.07721269, 166.63821102, 154.00160827,
	   147.09099144, 154.22160965, 173.26493156, 194.05779755,
	   206.83061008, 189.19055499, 186.33808622, 176.65285411,
	   162.17210818, 153.69474995, 160.34847421, 180.00225037,
	   201.80489618, 215.26463493, 204.55527963, 201.08537788,
	   189.75530236, 172.81121073, 162.20735706, 168.16559355,
	   188.58133733, 211.70873702, 226.08508173, 216.05796905,
	   212.11912672, 199.52558485, 180.66759319, 168.37886466,
	   173.73342896, 194.66980281, 218.77021834, 233.82910496
			};

			std::vector<double> actual_result(width * height);

			std::vector<double> temp(width * height);


			_inner::Gaussian1DFilter<double, Direction::X, Padding::SYMMETRIC>(input_image.data(), width, height, std_deriv, temp.data());
			_inner::Gaussian1DFilter<double, Direction::Y, Padding::SYMMETRIC>(temp.data(), width, height, std_deriv, actual_result.data());

			double near =0.6;

			for (int i = 0; i < width * height; i++)
			{
				EXPECT_NEAR(expected_result[i], actual_result[i], near);
				if (actual_result[i] < -1000)
					int _ = 2;
			}

		}

		TEST(Gaussian1DFilterTest, test2)
		{
			std::vector<double> input_image = {
				0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
		13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
		26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
		39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
		52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
		65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
		78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
		91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
	   104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	   117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	   130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
	   143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
	   156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	   169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	   182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
	   195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
	   208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
	   221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
	   234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	   247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
	   260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	   273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
	   286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
	   299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
	   312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	   325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337,
	   338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
	   351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
	   364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
	   377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	   390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	   403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
	   416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428,
	   429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	   442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	   455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467,
	   468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480,
	   481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493,
	   494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506,
	   507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519

			};

			int width = 20;
			int height = 26;

			double std_deriv = 1;

			std::vector<double> expected_result =
			{
				11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,
		24,  25,  26,  27,  28,  29,  30,  31,  32,  32,  33,  34,  35,
		27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,
		40,  41,  42,  43,  44,  45,  46,  47,  48,  48,  49,  50,  51,
		52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
		65,  66,  67,  68,  69,  70,  71,  72,  73,  73,  74,  75,  76,
		78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
		91,  92,  93,  94,  95,  96,  97,  98,  99,  99, 100, 101, 102,
	   104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	   117, 118, 119, 120, 121, 122, 123, 124, 125, 125, 126, 127, 128,
	   130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
	   143, 144, 145, 146, 147, 148, 149, 150, 151, 151, 152, 153, 154,
	   156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	   169, 170, 171, 172, 173, 174, 175, 176, 177, 177, 178, 179, 180,
	   182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
	   195, 196, 197, 198, 199, 200, 201, 202, 203, 203, 204, 205, 206,
	   208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
	   221, 222, 223, 224, 225, 226, 227, 228, 229, 229, 230, 231, 232,
	   234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	   247, 248, 249, 250, 251, 252, 253, 254, 255, 255, 256, 257, 258,
	   260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	   273, 274, 275, 276, 277, 278, 279, 280, 281, 281, 282, 283, 284,
	   286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
	   299, 300, 301, 302, 303, 304, 305, 306, 307, 307, 308, 309, 310,
	   312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	   325, 326, 327, 328, 329, 330, 331, 332, 333, 333, 334, 335, 336,
	   338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
	   351, 352, 353, 354, 355, 356, 357, 358, 359, 359, 360, 361, 362,
	   364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
	   377, 378, 379, 380, 381, 382, 383, 384, 385, 385, 386, 387, 388,
	   390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	   403, 404, 405, 406, 407, 408, 409, 410, 411, 411, 412, 413, 414,
	   415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427,
	   428, 429, 430, 431, 432, 433, 434, 435, 436, 436, 437, 438, 439,
	   441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	   454, 455, 456, 457, 458, 459, 460, 461, 462, 462, 463, 464, 465,
	   466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478,
	   479, 480, 481, 482, 483, 484, 485, 486, 487, 487, 488, 489, 490,
	   482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494,
	   495, 496, 497, 498, 499, 500, 501, 502, 503, 503, 504, 505, 506

			};

			std::vector<double> actual_result(width * height);

			std::vector<double> temp(width * height);


			_inner::Gaussian1DFilter<double, Direction::X, Padding::SYMMETRIC>(input_image.data(), width, height, std_deriv, temp.data());
			_inner::Gaussian1DFilter<double, Direction::Y, Padding::SYMMETRIC>(temp.data(), width, height, std_deriv, actual_result.data());

			double near = 11; //WTF

			for (int i = 0; i < width * height; i++)
			{
				EXPECT_NEAR(expected_result[i], actual_result[i], near);
				if (abs(expected_result[i] - actual_result[i] )> 8)
					int _ = 2;
			}

		}

		TEST(Gaussian1DFilterTest, kernel)
		{
			std::vector<double> expected_kernel = { 
				0.00024479, 0.00095376, 0.00316659, 0.00895898, 0.02159921,
	   0.04437413, 0.07768457, 0.11589176, 0.14732731, 0.15959777,
	   0.14732731, 0.11589176, 0.07768457, 0.04437413, 0.02159921,
	   0.00895898, 0.00316659, 0.00095376, 0.00024479
			};

			double std_deriv = 2.5;

			std::vector<double> actual_kernel = _inner::CreateKernel<double>(std_deriv);
			for (int i = 0; i < expected_kernel.size(); i++)
			{
				EXPECT_NEAR(actual_kernel[i], expected_kernel[i], 0.0001);

			}
		}
		
		TEST(Gaussian1DFilterTest, kernel2)
		{
			std::vector<double> expected_kernel = {
				0.00443305, 0.05400558, 0.24203623, 0.39905028, 0.24203623,
	   0.05400558, 0.00443305
			};

			double std_deriv =1;

			std::vector<double> actual_kernel = _inner::CreateKernel<double>(std_deriv);
			for (int i = 0; i < expected_kernel.size(); i++)
			{
				EXPECT_NEAR(actual_kernel[i], expected_kernel[i], 0.0002);

			}
		}
	}
}
