#include"gtest/gtest.h"
#include"cpu_backend/image/inner/DerivativeCalculator.h"
#include"image_helper/ImageHelper.h"

namespace cpu_backend
{
	namespace testing
	{
		TEST(DerivativeTest, test1)
		{
			float img[20]
			{
				0,   0,   0.1, 0,   0,
				0,   0.1, 0.2, 0.1, 0,
				0.1, 0.2, 0.4, 0.2, 0.1,
				0,   0.1, 0.2, 0.1, 0,

			};
			DerivativeCalculator<float> deriv_calc;
			imagehelper::Image deriv_x;
			deriv_x.width = 5;
			deriv_x.height = 4;
			deriv_x.color_count = 1;
			deriv_x.data = std::make_shared<std::vector<float>>(20);

			imagehelper::Image deriv_y;
			deriv_y.width = 5;
			deriv_y.height = 4;
			deriv_y.color_count = 1;
			deriv_y.data = std::make_shared<std::vector<float>>(20);


			deriv_calc.ComputeDerivativeX(img, deriv_x.width, deriv_x.height, deriv_x.data->data());
			deriv_calc.ComputeDerivativeY(img, deriv_y.width, deriv_y.height, deriv_y.data->data());

			float expected_deriv_x[20]
			{
				-8.33333333e-03,  6.66666667e-02,  0.00000000e+00, -6.66666667e-02,
				8.33333333e-03,  5.83333333e-02,  1.25000000e-01,  0.00000000e+00,
			   -1.25000000e-01, -5.83333333e-02,  5.00000000e-02,  1.91666667e-01,
				1.73472348e-18, -1.91666667e-01, -5.00000000e-02,  5.83333333e-02,
				1.25000000e-01,  0.00000000e+00, -1.25000000e-01, -5.83333333e-02
			};
			float expected_deriv_y[20]
			{
				-0.00833333,  0.05833333,  0.05      ,  0.05833333, -0.00833333,
				0.06666667,  0.125     ,  0.19166667,  0.125     ,  0.06666667,
				0.        , -0.00833333, -0.00833333, -0.00833333,  0.        ,
				-0.075     , -0.075     , -0.15      , -0.075     , -0.075
			};
			for (int i = 0; i < 20; i++)
			{
				float actual_x = deriv_x.data->data()[i];
				float actual_y = deriv_y.data->data()[i];
				EXPECT_NEAR(expected_deriv_x[i], actual_x, 0.001);
				EXPECT_NEAR(expected_deriv_y[i], actual_y, 0.001);


			}

		}

		TEST(DerivativeTest, test2)
		{
			float flow_y[35] =
			{
				-4.45333189e-02, -2.64400687e-02, -1.74602378e-02, -1.21782225e-02, -8.27281123e-03, -2.08896372e-03,  3.47853211e-04,
				-4.58008989e-02, -4.60611808e-02, -3.59827879e-02, -1.66246419e-02, -1.57139908e-02,  2.13075254e-03,  4.14972210e-03,
				-1.98916287e-02, -3.11841566e-02, -2.54235660e-02, -1.37003479e-02, 5.22110803e-03,  1.40253807e-02,  9.04690305e-03,
				-1.93571653e-02, -2.75315915e-02, -3.04310572e-02, -3.87269319e-03, -2.40842453e-03, -9.79753342e-05,  1.24949200e-03,
				-2.39405666e-02, -3.18769384e-02, -3.58664626e-02, -2.62541840e-02,-2.15233984e-02, -1.73480988e-02, -7.34160361e-03

				
			};

			float actual_result[35];
			DerivativeCalculator<float> calc;
			calc.ComputeDerivativeY(flow_y, 7, 5, actual_result);

			float expected_result[35] =
			{
				-0.00300416, - 0.01432049, - 0.0132283, - 0.00320797, - 0.00670538,	0.00182193,  0.00212648,
				0.01432978, - 0.00307177, - 0.00422798, - 0.00170688,  0.00850725, 0.01057698,  0.00572423,
				0.01591309,  0.01280613,  0.00523501,  0.0096743,   0.00997459, -0.00021422, - 0.0012927,
				-0.00452099, - 0.00164387, - 0.00697162, - 0.00756676, - 0.01734555, - 0.01929242, - 0.00996806,
				-0.00310014, - 0.00320128, - 0.00320631, - 0.01573997, - 0.01210752, - 0.01032314, - 0.00507761
			};

		}

		TEST(DerivativeTest, test3)
		{
			float flow_x[35] =
			{
				-8.94368966e-03, -2.52710902e-03,  9.82591755e-03, -2.06665272e-03, -2.18519877e-02, -3.47381975e-02, -2.32669439e-02,
				7.89709688e-03,  1.27247236e-02,  9.88429563e-03,  2.58216413e-03, -1.71296892e-02, -4.36177870e-02, -3.39598290e-02,
				7.46745338e-03,  1.47848070e-02,  1.80651884e-02,  1.60903127e-02, 1.12952349e-02, -4.37088238e-02, -3.63345471e-02,
				4.27294513e-03,  1.80658929e-02,  3.68889628e-02,  3.22158528e-02, 2.32580297e-02, -4.84490709e-02, -3.59219861e-02,
				4.52615972e-03,  1.87729092e-02,  3.77690217e-02,  4.15485472e-02, 1.59657358e-02, -3.55334945e-02, -2.93318388e-02


			};

			float expected_result[35]
			{
				0.0032483,   0.01193999,  0.00138266, - 0.01843435, - 0.01902329, 0.00082339,  0.00872135,
				0.00345512,  0.00176771, - 0.00467614, - 0.01331411, - 0.02714629, - 0.00817493,  0.00864598,
				0.00460487,  0.00634659,  0.00055136,  0.00036117, - 0.03533278, - 0.02738445,  0.00949986,
				0.00762671,  0.01941544,  0.00785122, - 0.00354438, - 0.04770904, - 0.03377519,  0.01432698,
				0.00791482,  0.01907671,  0.01423046, - 0.01000999, - 0.04579629, - 0.02429168,  0.00842604
			};

		}

		TEST(DerivativeTest, DivergenceTest1)
		{
			float flow[70] =
			{
				-4.45333189e-02, -2.64400687e-02, -1.74602378e-02, -1.21782225e-02, -8.27281123e-03, -2.08896372e-03,  3.47853211e-04,
				-4.58008989e-02, -4.60611808e-02, -3.59827879e-02, -1.66246419e-02, -1.57139908e-02,  2.13075254e-03,  4.14972210e-03,
				-1.98916287e-02, -3.11841566e-02, -2.54235660e-02, -1.37003479e-02, 5.22110803e-03,  1.40253807e-02,  9.04690305e-03,
				-1.93571653e-02, -2.75315915e-02, -3.04310572e-02, -3.87269319e-03, -2.40842453e-03, -9.79753342e-05,  1.24949200e-03,
				-2.39405666e-02, -3.18769384e-02, -3.58664626e-02, -2.62541840e-02,-2.15233984e-02, -1.73480988e-02, -7.34160361e-03,

				-8.94368966e-03, -2.52710902e-03,  9.82591755e-03, -2.06665272e-03, -2.18519877e-02, -3.47381975e-02, -2.32669439e-02,
				7.89709688e-03,  1.27247236e-02,  9.88429563e-03,  2.58216413e-03, -1.71296892e-02, -4.36177870e-02, -3.39598290e-02,
				7.46745338e-03,  1.47848070e-02,  1.80651884e-02,  1.60903127e-02, 1.12952349e-02, -4.37088238e-02, -3.63345471e-02,
				4.27294513e-03,  1.80658929e-02,  3.68889628e-02,  3.22158528e-02, 2.32580297e-02, -4.84490709e-02, -3.59219861e-02,
				4.52615972e-03,  1.87729092e-02,  3.77690217e-02,  4.15485472e-02, 1.59657358e-02, -3.55334945e-02, -2.93318388e-02

			};

			int width = 7;
			int height = 5;

			DerivativeCalculator<float> deriv_calc;

			float actual_result[35];

			deriv_calc.FlowDivergence(flow, width, height, actual_result);

			float expected_result[35] =
			{
				0.00024414, - 0.00238051, - 0.01184564, - 0.02164232, - 0.02572867,  0.00264531, 0.01084783,
				0.0177849, - 0.00130405, - 0.00890412, - 0.01502099, - 0.01863904,  0.00240205, 0.01437021,
				0.02051796,  0.01915272,  0.00578636,  0.01003546, - 0.02535819, - 0.02759867, 0.00820716,
				0.00310572,  0.01777156,  0.00087959, - 0.01111114, - 0.06505459, - 0.05306761, 0.00435892,
				0.00481468,  0.01587543,  0.01102415, - 0.02574996, - 0.05790381, - 0.03461482, 0.00334843
			};

			for (int i = 0; i < 35; i++)
				EXPECT_NEAR(expected_result[i], actual_result[i], 0.0001);
		}
	}
}